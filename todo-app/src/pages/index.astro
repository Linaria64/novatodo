---
import '../styles/global.css';
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Cyber Todo App</title>
		<script src="https://cdn.tailwindcss.com"></script>
		<style>
			.glass {
				background: rgba(255, 255, 255, 0.1);
				backdrop-filter: blur(10px);
				border: 1px solid rgba(255, 255, 255, 0.2);
			}
			.glow {
				box-shadow: 0 0 20px rgba(0, 255, 255, 0.3);
				animation: pulseGlow 3s ease-in-out infinite alternate;
			}
			@keyframes pulseGlow {
				0% { box-shadow: 0 0 20px rgba(0, 255, 255, 0.3); }
				100% { box-shadow: 0 0 30px rgba(0, 255, 255, 0.5); }
			}
			.neon-text {
				text-shadow: 0 0 10px rgba(0, 255, 255, 0.8);
				animation: neonPulse 2s ease-in-out infinite alternate;
			}
			@keyframes neonPulse {
				0% { text-shadow: 0 0 10px rgba(0, 255, 255, 0.8); }
				100% { text-shadow: 0 0 20px rgba(0, 255, 255, 1), 0 0 30px rgba(0, 255, 255, 0.5); }
			}
			.task-card {
				transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
				transform-origin: center;
			}
			.task-card:hover {
				transform: translateY(-6px) scale(1.03) rotate(1deg);
				box-shadow: 0 12px 35px rgba(0, 255, 255, 0.3);
			}
			.add-task-card {
				transition: all 0.4s ease;
				border: 2px dashed rgba(34, 197, 94, 0.5);
				animation: breathe 2s ease-in-out infinite alternate;
			}
			.add-task-card:hover {
				border-color: rgba(34, 197, 94, 0.8);
				background: rgba(34, 197, 94, 0.1);
				transform: translateY(-4px) scale(1.05);
				animation: none;
			}
			@keyframes breathe {
				0% { transform: scale(1); }
				100% { transform: scale(1.02); }
			}
			.slide-in {
				animation: slideIn 0.8s ease-out;
			}
			@keyframes slideIn {
				from {
					opacity: 0;
					transform: translateX(-40px) rotate(-8deg);
				}
				to {
					opacity: 1;
					transform: translateX(0) rotate(0deg);
				}
			}
			.project-container {
				animation: fadeInUp 1s ease-out;
			}
			@keyframes fadeInUp {
				from { 
					opacity: 0; 
					transform: scale(0.8) translateY(40px) rotate(-2deg); 
				}
				to { 
					opacity: 1; 
					transform: scale(1) translateY(0) rotate(0deg); 
				}
			}
			.task-moving {
				animation: taskTeleport 1.2s ease-in-out forwards;
				z-index: 1000;
				position: relative;
			}
			@keyframes taskTeleport {
				0% {
					transform: scale(1) rotate(0deg);
					opacity: 1;
					box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
				}
				15% {
					transform: scale(1.2) rotate(10deg);
					box-shadow: 0 0 25px rgba(0, 255, 255, 0.8);
				}
				30% {
					transform: scale(0.1) rotate(180deg);
					opacity: 0.8;
					box-shadow: 0 0 50px rgba(0, 255, 255, 1);
				}
				50% {
					transform: scale(0) rotate(360deg);
					opacity: 0;
					box-shadow: 0 0 100px rgba(0, 255, 255, 0.5);
				}
				70% {
					transform: scale(0.1) rotate(540deg);
					opacity: 0.3;
				}
				85% {
					transform: scale(1.1) rotate(720deg);
					opacity: 0.8;
					box-shadow: 0 0 30px rgba(0, 255, 255, 0.6);
				}
				100% {
					transform: scale(1) rotate(720deg);
					opacity: 1;
					box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
				}
			}
			.task-transition-in {
				animation: materialize 0.8s ease-out;
			}
			@keyframes materialize {
				0% {
					opacity: 0;
					transform: scale(0) rotate(-180deg);
					box-shadow: 0 0 100px rgba(0, 255, 255, 1);
				}
				25% {
					opacity: 0.3;
					transform: scale(0.3) rotate(-90deg);
					box-shadow: 0 0 50px rgba(0, 255, 255, 0.8);
				}
				50% {
					opacity: 0.6;
					transform: scale(0.7) rotate(0deg);
					box-shadow: 0 0 25px rgba(0, 255, 255, 0.6);
				}
				75% {
					transform: scale(1.1) rotate(10deg);
				}
				100% {
					opacity: 1;
					transform: scale(1) rotate(0deg);
					box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
				}
			}
			.completed-task {
				text-decoration: line-through;
				opacity: 0.7;
				animation: completeEffect 0.5s ease-out;
			}
			@keyframes completeEffect {
				0% { opacity: 1; transform: scale(1); }
				50% { opacity: 0.5; transform: scale(1.1); }
				100% { opacity: 0.7; transform: scale(1); }
			}
			.task-input-card {
				animation: expandIn 0.5s ease-out;
				transform-origin: top center;
			}
			.task-input-card.hidden {
				display: none;
			}
			@keyframes expandIn {
				0% { 
					opacity: 0; 
					transform: scaleY(0) translateY(-20px);
					max-height: 0;
				}
				50% {
					opacity: 0.5;
					transform: scaleY(0.5) translateY(-10px);
				}
				100% { 
					opacity: 1; 
					transform: scaleY(1) translateY(0);
					max-height: 200px;
				}
			}
			.button-hover {
				transition: all 0.3s ease;
			}
			.button-hover:hover {
				transform: translateY(-2px) scale(1.05);
				box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
			}
			.column-header {
				animation: headerFloat 3s ease-in-out infinite;
			}
			@keyframes headerFloat {
				0%, 100% { transform: translateY(0px); }
				50% { transform: translateY(-3px); }
			}
			.floating {
				animation: float 4s ease-in-out infinite;
			}
			@keyframes float {
				0%, 100% { transform: translateY(0px) rotate(0deg); }
				25% { transform: translateY(-5px) rotate(1deg); }
				50% { transform: translateY(-3px) rotate(0deg); }
				75% { transform: translateY(-7px) rotate(-1deg); }
			}
			.delete-button {
				transition: all 0.3s ease;
			}
			.delete-button:hover {
				transform: scale(1.2) rotate(90deg);
				box-shadow: 0 0 15px rgba(255, 0, 0, 0.5);
			}
			.container {
				animation: containerEntry 1.2s ease-out;
			}
			@keyframes containerEntry {
				from {
					opacity: 0;
					transform: scale(0.95) translateY(20px);
				}
				to {
					opacity: 1;
					transform: scale(1) translateY(0);
				}
			}
			.count-badge {
				animation: bounceIn 0.5s ease-out;
			}
			@keyframes bounceIn {
				0% { transform: scale(0.3); }
				50% { transform: scale(1.2); }
				100% { transform: scale(1); }
			}
			.add-button {
				transition: all 0.3s ease;
			}
			.add-button:hover {
				transform: scale(1.2) rotate(90deg);
				box-shadow: 0 0 20px rgba(34, 197, 94, 0.5);
			}
		</style>
	</head>

	<body class="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 text-white overflow-x-auto">
		<div class="container mx-auto px-4 py-8">
			<h1 class="text-4xl font-bold text-center mb-8 neon-text floating">Cyber Todo Manager</h1>
			
			<!-- Project Creation -->
			<div class="glass rounded-xl p-6 mb-8 glow">
				<h2 class="text-xl font-semibold mb-4 text-cyan-300 column-header">New Project</h2>
				<div class="flex gap-4">
					<input 
						type="text" 
						id="projectName" 
						placeholder="Project name..."
						class="flex-1 bg-black/30 border border-cyan-400/50 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:border-cyan-400 focus:outline-none transition-all duration-300 focus:scale-105"
					>
					<button 
						onclick="addProject()"
						class="bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 px-6 py-2 rounded-lg font-semibold button-hover"
					>
						Create
					</button>
				</div>
			</div>

			<!-- Projects Container -->
			<div id="projectsContainer" class="space-y-8"></div>
		</div>

		<script>
			// Type declarations for global window functions
			declare global {
				interface Window {
					addProject: () => void;
					showTaskInput: (projectId: number) => void;
					hideTaskInput: (projectId: number) => void;
					addTaskToTodo: (projectId: number) => void;
					moveTask: (projectId: number, taskId: number, from: string, to: string) => void;
					deleteTask: (projectId: number, taskId: number, status: string) => void;
					deleteProject: (projectId: number) => void;
				}
			}

			interface Task {
				id: number;
				name: string;
				createdAt: string;
				startedAt?: string;
				completedAt?: string;
			}

			interface Project {
				id: number;
				name: string;
				createdAt: string;
				tasks: {
					todo: Task[];
					inProgress: Task[];
					completed: Task[];
				};
			}

			let projects: Project[] = [];
			
			// Initialize projects from localStorage
			const storedProjects = localStorage.getItem('todoProjects');
			if (storedProjects) {
				try {
					const parsedProjects = JSON.parse(storedProjects) as Project[];
					// Validate and fix project structure
					projects = parsedProjects.map(project => ({
						...project,
						tasks: project.tasks || {
							todo: [],
							inProgress: [],
							completed: []
						}
					}));
				} catch (error) {
					console.error('Error parsing stored projects:', error);
					projects = [];
				}
			}

			function saveData(): void {
				localStorage.setItem('todoProjects', JSON.stringify(projects));
			}

			window.addProject = function(): void {
				const input = document.getElementById('projectName') as HTMLInputElement;
				if (!input) return;
				
				const name = input.value.trim();
				
				if (name) {
					const project: Project = {
						id: Date.now(),
						name: name,
						createdAt: new Date().toLocaleDateString(),
						tasks: {
							todo: [],
							inProgress: [],
							completed: []
						}
					};
					projects.push(project);
					input.value = '';
					saveData();
					renderProjects();
				}
			}

			window.showTaskInput = function(projectId: number): void {
				const inputCard = document.getElementById(`inputCard-${projectId}`);
				
				if (inputCard) {
					inputCard.classList.remove('hidden');
					
					const input = document.getElementById(`taskInput-${projectId}`) as HTMLInputElement;
					if (input) {
						input.focus();
					}
				}
			}

			window.hideTaskInput = function(projectId: number): void {
				const inputCard = document.getElementById(`inputCard-${projectId}`);
				
				if (inputCard) {
					inputCard.classList.add('hidden');
					
					const input = document.getElementById(`taskInput-${projectId}`) as HTMLInputElement;
					if (input) {
						input.value = '';
					}
				}
			}

			window.addTaskToTodo = function(projectId: number): void {
				const input = document.getElementById(`taskInput-${projectId}`) as HTMLInputElement;
				if (!input) return;
				
				const taskName = input.value.trim();
				
				if (taskName) {
					const project = projects.find((p: Project) => p.id === projectId);
					if (project) {
						const task: Task = {
							id: Date.now(),
							name: taskName,
							createdAt: new Date().toLocaleDateString()
						};
						project.tasks.todo.push(task);
						saveData();
						renderProjects();
					}
				}
			}

			window.moveTask = function(projectId: number, taskId: number, from: string, to: string): void {
				const project = projects.find((p: Project) => p.id === projectId);
				if (project) {
					const taskIndex = project.tasks[from as keyof typeof project.tasks].findIndex((t: Task) => t.id === taskId);
					if (taskIndex !== -1) {
						const task = project.tasks[from as keyof typeof project.tasks].splice(taskIndex, 1)[0];
						
						// Animation avant le déplacement
						const taskElement = document.querySelector(`[data-task-id="${taskId}"]`) as HTMLElement;
						if (taskElement) {
							// Animation de téléportation quantique
							taskElement.classList.add('task-moving');
						}
						
						if (to === 'inProgress') {
							task.startedAt = new Date().toLocaleDateString();
						} else if (to === 'completed') {
							task.completedAt = new Date().toLocaleDateString();
						}
						project.tasks[to as keyof typeof project.tasks].push(task);
						saveData();
						
						// Délai pour l'animation complète
						setTimeout(() => {
							renderProjects();
						}, 1200);
					}
				}
			}

			window.deleteTask = function(projectId: number, taskId: number, status: string): void {
				if (status === 'completed') {
					return; // Cannot delete completed tasks
				}
				const project = projects.find((p: Project) => p.id === projectId);
				if (project) {
					project.tasks[status as keyof typeof project.tasks] = project.tasks[status as keyof typeof project.tasks].filter((t: Task) => t.id !== taskId);
					saveData();
					renderProjects();
				}
			}

			window.deleteProject = function(projectId: number): void {
				if (confirm('Are you sure you want to delete this project?')) {
					projects = projects.filter((p: Project) => p.id !== projectId);
					saveData();
					renderProjects();
				}
			}

			function renderTask(task: Task, projectId: number, status: string): string {
				let onClick = '';
				let statusText = '';
				let borderColor = '';
				let textColor = '';
				let bgGradient = '';
				let taskClass = 'task-card task-transition-in';
				let deleteButton = '';
				
				switch(status) {
					case 'todo':
						onClick = `onclick="moveTask(${projectId}, ${task.id}, 'todo', 'inProgress')"`;
						statusText = `Created on ${task.createdAt}`;
						borderColor = 'border-green-400/50 hover:border-green-400';
						textColor = 'text-green-100';
						bgGradient = 'bg-gradient-to-br from-green-500/10 to-emerald-500/10';
						deleteButton = `
							<button 
								onclick="event.stopPropagation(); deleteTask(${projectId}, ${task.id}, '${status}')"
								class="delete-button w-7 h-7 bg-gradient-to-r from-red-500 to-pink-500 rounded-full flex items-center justify-center text-xs ml-3 opacity-80 hover:opacity-100"
								title="Delete"
							>
								✕
							</button>
						`;
						break;
					case 'inProgress':
						onClick = `onclick="moveTask(${projectId}, ${task.id}, 'inProgress', 'completed')"`;
						statusText = `Started on ${task.startedAt}`;
						borderColor = 'border-yellow-400/50 hover:border-yellow-400';
						textColor = 'text-yellow-100';
						bgGradient = 'bg-gradient-to-br from-yellow-500/10 to-orange-500/10';
						deleteButton = `
							<button 
								onclick="event.stopPropagation(); deleteTask(${projectId}, ${task.id}, '${status}')"
								class="delete-button w-7 h-7 bg-gradient-to-r from-red-500 to-pink-500 rounded-full flex items-center justify-center text-xs ml-3 opacity-80 hover:opacity-100"
								title="Delete"
							>
								✕
							</button>
						`;
						break;
					case 'completed':
						statusText = `Completed on ${task.completedAt}`;
						borderColor = 'border-purple-400/50';
						textColor = 'text-purple-100 completed-task';
						bgGradient = 'bg-gradient-to-br from-purple-500/10 to-pink-500/10';
						taskClass = 'task-card task-transition-in';
						// No delete button for completed tasks
						break;
				}

				return `
					<div class="${taskClass} ${bgGradient} border ${borderColor} rounded-lg p-4 backdrop-blur-sm ${onClick ? 'cursor-pointer' : ''}" ${onClick} data-task-id="${task.id}">
						<div class="flex justify-between items-start">
							<div class="flex-1">
								<h4 class="font-semibold ${textColor} mb-1">${task.name}</h4>
								<p class="text-xs text-gray-400">${statusText}</p>
							</div>
							${deleteButton}
						</div>
					</div>
				`;
			}

			function renderAddTaskCard(projectId: number): string {
				return `
					<!-- Add Task Button -->
					<div class="flex justify-center mb-3">
						<button 
							onclick="showTaskInput(${projectId})"
							class="add-button w-10 h-10 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center text-white font-bold text-xl shadow-lg"
							title="Add new task"
						>
							+
						</button>
					</div>
					
					<!-- Task Input Card -->
					<div id="inputCard-${projectId}" class="task-input-card hidden bg-gradient-to-br from-green-500/10 to-emerald-500/10 border border-green-400/50 rounded-lg p-4 backdrop-blur-sm mb-3">
						<div class="space-y-3">
							<input 
								type="text" 
								id="taskInput-${projectId}" 
								placeholder="Enter task name..."
								class="w-full bg-black/30 border border-green-400/30 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:border-green-400 focus:outline-none text-sm transition-all duration-300 focus:scale-105"
								onkeypress="if(event.key==='Enter') addTaskToTodo(${projectId})"
							>
							<div class="flex gap-2">
								<button 
									onclick="addTaskToTodo(${projectId})"
									class="bg-gradient-to-r from-emerald-500 to-green-500 hover:from-emerald-600 hover:to-green-600 px-3 py-1 rounded-lg font-semibold button-hover text-sm flex-1"
								>
									Add Task
								</button>
								<button 
									onclick="hideTaskInput(${projectId})"
									class="bg-gray-600 hover:bg-gray-700 px-3 py-1 rounded-lg button-hover text-sm"
								>
									Cancel
								</button>
							</div>
						</div>
					</div>
				`;
			}

			function renderProjects(): void {
				const container = document.getElementById('projectsContainer');
				if (!container) return;
				
				if (projects.length === 0) {
					container.innerHTML = '<div class="text-center text-gray-400 py-8 floating">No projects created. Create your first project above!</div>';
					return;
				}

				container.innerHTML = projects.map((project: Project) => `
					<div class="project-container glass rounded-xl p-6 glow">
						<div class="flex justify-between items-center mb-6">
							<div>
								<h2 class="text-2xl font-bold text-cyan-300 column-header">${project.name}</h2>
								<p class="text-sm text-gray-400">Created on ${project.createdAt}</p>
							</div>
							<button 
								onclick="deleteProject(${project.id})"
								class="delete-button bg-gradient-to-r from-red-500 to-pink-500 rounded-full w-8 h-8 flex items-center justify-center"
								title="Delete project"
							>
								✕
							</button>
						</div>

						<!-- Task Columns -->
						<div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
							<!-- To Do -->
							<div class="bg-black/20 rounded-lg p-4 min-h-[200px]">
								<h3 class="text-lg font-semibold mb-4 text-green-300 flex items-center column-header">
									📋 To Do 
									<span class="count-badge ml-2 text-xs bg-green-500/30 px-2 py-1 rounded-full">${project.tasks.todo.length}</span>
								</h3>
								<div class="space-y-3">
									${renderAddTaskCard(project.id)}
									${project.tasks.todo.map((task: Task) => renderTask(task, project.id, 'todo')).join('')}
								</div>
							</div>

							<!-- In Progress -->
							<div class="bg-black/20 rounded-lg p-4 min-h-[200px]">
								<h3 class="text-lg font-semibold mb-4 text-yellow-300 flex items-center column-header">
									🔄 In Progress 
									<span class="count-badge ml-2 text-xs bg-yellow-500/30 px-2 py-1 rounded-full">${project.tasks.inProgress.length}</span>
								</h3>
								<div class="space-y-3">
									${project.tasks.inProgress.map((task: Task) => renderTask(task, project.id, 'inProgress')).join('')}
								</div>
							</div>

							<!-- Completed -->
							<div class="bg-black/20 rounded-lg p-4 min-h-[200px]">
								<h3 class="text-lg font-semibold mb-4 text-purple-300 flex items-center column-header">
									✅ Completed 
									<span class="count-badge ml-2 text-xs bg-purple-500/30 px-2 py-1 rounded-full">${project.tasks.completed.length}</span>
								</h3>
								<div class="space-y-3">
									${project.tasks.completed.map((task: Task) => renderTask(task, project.id, 'completed')).join('')}
								</div>
							</div>
						</div>
					</div>
				`).join('');
			}

			// Enter key support for project creation
			document.addEventListener('DOMContentLoaded', function() {
				const projectNameInput = document.getElementById('projectName') as HTMLInputElement;
				if (projectNameInput) {
					projectNameInput.addEventListener('keypress', function(e: KeyboardEvent) {
						if (e.key === 'Enter') {
							window.addProject();
						}
					});
				}
				
				// Initial render
				renderProjects();
			});
		</script>
	</body>
</html>
